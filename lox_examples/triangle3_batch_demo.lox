// Triangle3 Batch Demo - demonstrates batched triangles with 3 arbitrary points
// Creates a large undulating terrain mesh using thousands of small triangles
import colour
import math

win = window(1200, 800);
win.init();
win.set_target_fps(60);

camera = camera(vec3(0, 15, 20), vec3(0, 0, 0), vec3(0, 1, 0));

// Create a batch for storing triangles with three arbitrary points
batch = batch(win.BATCH_TRIANGLE3);

// Terrain configuration
const TERRAIN_SIZE = 52;    // Grid size reduced for debugging
const TERRAIN_SCALE = 0.7;  // Distance between vertices
const WAVE_HEIGHT = 3.0;    // Maximum height of waves
const WAVE_FREQUENCY = 0.30; // Frequency of terrain waves

func heightToColor(height) {
    normalizedHeight = (height + WAVE_HEIGHT) / (2.0 * WAVE_HEIGHT);
    if (normalizedHeight < 0) normalizedHeight = 0;
    if (normalizedHeight > 1) normalizedHeight = 1;
    // Map height to hue: 220 (blue) to 60 (yellow) to 0 (red/white)
    hue = 220 - 220 * normalizedHeight; // 220 (blue) to 0 (red)
    sat = 1.0;
    val = 1.0;
    rgb = colour.hsv_to_rgb(hue, sat, val); // returns vec3
    return vec4(rgb.x, rgb.y, rgb.z, 255);
}

print("Generating terrain with " + str(TERRAIN_SIZE * TERRAIN_SIZE * 2) + " triangles...");

// Generate a grid of triangles forming an undulating terrain
triInfo = [];
for (x = 0; x < TERRAIN_SIZE - 1; x += 1) {
    for (z = 0; z < TERRAIN_SIZE - 1; z += 1) {
        // Precompute and store static world positions for this quad
        x1 = (x - TERRAIN_SIZE / 2) * TERRAIN_SCALE;
        x2 = (x + 1 - TERRAIN_SIZE / 2) * TERRAIN_SCALE;
        z1 = (z - TERRAIN_SIZE / 2) * TERRAIN_SCALE;
        z2 = (z + 1 - TERRAIN_SIZE / 2) * TERRAIN_SCALE;

        // Store info for triangle 1 (v1, v3, v2)
        info1 = {};
        info1["idx"] = batch.add_triangle3(vec3(0,0,0), vec3(0,0,0), vec3(0,0,0), vec4(0,0,0,255)); // placeholder
        info1["which"] = 1;
        info1["x1"] = x1;
        info1["x2"] = x2;
        info1["z1"] = z1;
        info1["z2"] = z2;
        triInfo.append(info1);

        // Store info for triangle 2 (v2, v3, v4)
        info2 = {};
        info2["idx"] = batch.add_triangle3(vec3(0,0,0), vec3(0,0,0), vec3(0,0,0), vec4(0,0,0,255)); // placeholder
        info2["which"] = 2;
        info2["x1"] = x1;
        info2["x2"] = x2;
        info2["z1"] = z1;
        info2["z2"] = z2;
        triInfo.append(info2);
        
    }
 
}

print("Generated " + str(batch.count()) + " triangles!");


// Animation variables
cameraAngle = 0.0;
frameCount = 0;

// Precompute sine/cosine tables for all grid points and all frames in a cycle
const N_FRAMES = 1000; // 12 seconds at 30fps
sinXTable = [];
cosZTable = [];
for (f = 0; f < N_FRAMES; f += 1) {
    t = f * (1.0 / 30.0);
    sinXRow = [];
    for (xi = 0; xi < TERRAIN_SIZE; xi += 1) {
        xw = (xi - TERRAIN_SIZE / 2) * TERRAIN_SCALE;
        sinXRow.append(math.sin(xw * WAVE_FREQUENCY + t));
    }
    sinXTable.append(sinXRow);
    cosZRow = [];
    for (zi = 0; zi < TERRAIN_SIZE; zi += 1) {
        zw = (zi - TERRAIN_SIZE / 2) * TERRAIN_SCALE;
        cosZRow.append(math.cos(zw * WAVE_FREQUENCY + t));
    }
    cosZTable.append(cosZRow);
}


while (!win.should_close()) {
    frameCount += 1;
    time = frameCount * (1.0 / 30.0); // Use frame count for animation, targeting 30fps
    cameraAngle += 0.3; // Slower rotation for better viewing

    // Animate camera in a circle high above the terrain
    radius = 35.0; // Closer to terrain for better visibility
    height = 15.0 + math.sin(time * 0.3) * 5.0; // Lower height, gentler oscillation
    camX = radius * math.cos(math.radians(cameraAngle));
    camZ = radius * math.sin(math.radians(cameraAngle));

    camera.set_position(vec3(camX, height, camZ));
    camera.set_target(vec3(0, 0, 0)); // Always look at center of terrain

    //--- DYNAMIC WAVE UPDATE (Precomputed trig tables) ---
    frameIdx = frameCount % N_FRAMES;
    sinX = sinXTable[frameIdx];
    cosZ = cosZTable[frameIdx];
 
    // Update all triangles with new heights for animation
    for (i = 0; i < len(triInfo); i += 1) {
        info = triInfo[i];
        idx = info["idx"];
        which = info["which"];

        // Use precomputed world positions for this triangle
        x1 = info["x1"];
        x2 = info["x2"];
        z1 = info["z1"];
        z2 = info["z2"];
        which = info["which"];

        // Convert world positions to grid indices
        xi1 = math.round((x1 + (TERRAIN_SIZE / 2) * TERRAIN_SCALE) / TERRAIN_SCALE);
        xi2 = math.round((x2 + (TERRAIN_SIZE / 2) * TERRAIN_SCALE) / TERRAIN_SCALE);
        zi1 = math.round((z1 + (TERRAIN_SIZE / 2) * TERRAIN_SCALE) / TERRAIN_SCALE);
        zi2 = math.round((z2 + (TERRAIN_SIZE / 2) * TERRAIN_SCALE) / TERRAIN_SCALE);

        // Use precomputed trig tables for heights
        y1 = sinX[xi1] * cosZ[zi1] * WAVE_HEIGHT;
        y2 = sinX[xi2] * cosZ[zi1] * WAVE_HEIGHT;
        y3 = sinX[xi1] * cosZ[zi2] * WAVE_HEIGHT;
        y4 = sinX[xi2] * cosZ[zi2] * WAVE_HEIGHT;

        v1 = 0;
        v2 = 0;
        v3 = 0;
        color = vec4(255,255,255,255);
        if (which == 1) {
            v1 = vec3(x1, y1, z1);  // Top-left
            v2 = vec3(x1, y3, z2);  // Bottom-left
            v3 = vec3(x2, y2, z1);  // Top-right
            avgHeight = (y1 + y2 + y3) / 3.0;
            color = heightToColor(avgHeight);
        } else {
            v1 = vec3(x2, y2, z1);  // Top-right
            v2 = vec3(x1, y3, z2);  // Bottom-left
            v3 = vec3(x2, y4, z2);  // Bottom-right
            avgHeight = (y2 + y3 + y4) / 3.0;
            color = heightToColor(avgHeight);
        }
        batch.set_triangle3(info["idx"], v1, v2, v3);
        batch.set_triangle3_color(info["idx"], color);
    }
    

    win.begin();
    win.clear(vec4(20, 30, 50, 255)); // Dark blue sky

    // Ensure we're using normal alpha blending, not additive
    win.begin_blend_mode(win.BLEND_ALPHA);

    win.begin_3d(camera);

    // Draw the massive triangle terrain with better culling settings
    camPos = vec3(camX, height, camZ);

    // Use consistent distance culling - no frustum culling to avoid flickering
    batch.draw_culled(camPos, 320.0); // Increased draw distance to cover full terrain

    win.end_3d();

    // End the blend mode
    win.end_blend_mode();

  
    win.end();
    
}

win.close();
