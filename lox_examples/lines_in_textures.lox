import random as rn
import math  
import colour as col 

class Circle {
    init(pos, radius, col, width, height, angle) {
        this.pos = pos
        this.maxradius = radius
        this.radius = 1 
        this.dr=1.03 
        this.col = col
        this.angle = angle
        this.dir = math.PI/4 * float(rn.integer(0,4))
        this.maxspeed = rn.integer(15,35)
        this.speed = 1 
        this.dspeed = 1 
        this.counter = 0 
        this.width = width
        this.height = height
        this.change = rn.integer(30,60)
        this.lastp = vec2(0,0)
        this.thickness = rn.integer(1,5)
    } 
    update() {
        this.lastp = vec2(this.pos.x, this.pos.y)
        this.pos.x = this.pos.x + this.speed * cos(this.dir)
        this.pos.y = this.pos.y + this.speed * sin(this.dir)
        if (this.pos.x > this.width or this.pos.x < 0) {
            this.dir = this.dir + math.PI
        }
        if (this.pos.y > this.height or this.pos.y < 0) {
            this.dir = this.dir + math.PI
        }
        this.counter = this.counter + 1
        if (this.counter > this.change ) {
            this.counter = 0
            this.change = rn.integer(2,10)
            this.dir = this.dir + this.angle * rn.choice([-1,1])
        }
     
             
        this.radius = this.radius * this.dr 
        if (this.radius > this.maxradius or this.radius < 1) {
            this.dr = 1/this.dr 
        }

        this.speed = this.speed + this.dspeed
        if (this.speed > this.maxspeed or this.speed < 1) {
            this.dspeed = -this.dspeed
        }         
    }
    draw(frame) {
        
        frame.texture.line_ex(this.pos,this.lastp,this.thickness,this.col)
        
    }
}

class Frame {
    init(width, height,circle) {
        this.width = width
        this.height = height
        this.rotation = 0.0
        this.scale = 1.0
        this.pos= vec2(rn.integer(0,W-width), rn.integer(0,H-height))
        this.dpos= vec2(rn.integer(-1,1), rn.integer(-1,1))
        this.texture = render_texture(width, height)
        this.circle=circle 
        this.counter=0
        this.change = rn.integer(150,400)
    }
    update() {
     
        this.counter = this.counter + 1
        //this.pos = this.pos + this.dpos
        if (this.counter > this.change) {
            this.counter = 0
            newx= rn.integer(0,1000-(this.width*this.scale))
            this.pos= vec2(rn.integer(0,W-(this.width*this.scale)), rn.integer(0,H-this.height*this.scale))
            this.rotation = this.rotation+45.0
            this.scale = rn.float(0.125, 0.75)
        }
    }
    clear(col) {
        this.texture.clear(col)
    }
    draw(win) {
        

        foreach ( i in range (-2,2)) {
            foreach ( j in range (-2,2)) {
                if ( (i+j) % 2 == 0) {
                    continue
                }
                npos = vec2(i*0.25*this.width,j*0.25*this.height) + this.pos
                win.draw_render_texture_ex(this.texture, npos, this.rotation, this.scale)
            }
        }
        
    }
}

 

ww=700
wh=700
 
frame_count=100

diag=math.PI/4.0
sqr=math.PI/2.0

win=window(800,800)  
win.init() 
//win.toggle_fullscreen()
W=win.get_screen_width()
H=win.get_screen_height()
win.begin()
win.clear(col.BLACK)
win.end()

counter = 0 
clear=vec4(0,0,0,0)
frames=[] 

col1 = vec4(255,0,0,100)
col2 = vec4(0,255,0,100)
col3 = vec4(0,0,255,100)

foreach ( i in range(0,frame_count)) {
    x = rn.integer(0,ww)
    y = rn.integer(0,wh)
    radius = rn.integer(1,3)
    c = rn.choice([col1,col2,col3])
   
    angle = rn.choice([diag,sqr])
    frames.append(Frame(ww, wh, Circle(vec2(x,y),radius,c,ww,wh,angle)))
}


while (!win.should_close()) {
 
    win.begin_blend_mode(win.BLEND_ALPHA)

    counter = counter + 1
    if (counter >100) {
        counter = 0
    }
    if (counter == 0 ) {
        i = rn.integer(0,frame_count-1)
        x = rn.integer(0,ww)
        y = rn.integer(0,wh)
        radius = rn.integer(1,3)
        c = rn.choice([col1,col2,col3])
        if ( rn.integer(0,5) < 1 ) {
            c = vec4(0,0,0,255)
        }
        angle = rn.choice([diag,sqr])
        frames[i].circle=Circle(vec2(x,y),radius,c,ww,wh,angle)
        frames[i].clear(clear)
        print "+"
    }
  

    foreach ( i in range(0,frame_count)) {
        frames[i].update()
        frames[i].circle.update()
        frames[i].circle.draw(frames[i])
    }
    
    win.begin() 
    win.clear(vec4(20,20,20,20))
    
    foreach ( i in range(0,frame_count)) {
        frames[i].draw(win)
    }
    win.end_blend_mode()
    win.end()
 
}
win.close()
