import mountains 
import stars 
import random
import lander 
import entity_mgr 
import itertools
import radar

class Controller {
    init(vel) {
        this.targetvel = vel  
        this.vel = 0
        this.counter = 0
        this.next() 
    }
    next(){
        this.nextthink = random.integer(50,300)
    }
    update() {
        this.counter = this.counter + 1
        if (this.counter >= this.nextthink) {
            this.counter = 0
            this.next()
            //this.targetvel = - this.targetvel  
        }
        if (this.vel < this.targetvel) {
            this.vel = this.vel + 1
        } else if (this.vel > this.targetvel) {
            this.vel = this.vel - 1
        }
    }
}

class Camera {
    init(screenwidth,width,pos ) {
        this.width = width
        this.x = pos
        this.screenwidth = screenwidth
    }
    move(x) {
        this.x = x
    }
    translate(wp) {
        p = wp - this.x
        if (p<0 or p > this.screenwidth) {
            return nil
        }
        return p
    }
}
 

const width=1000
const height=800
const worldwidth=width*10
var win = window(width,height)
win.init()

cam=Camera(width, worldwidth, 0)
cont=Controller(10)
 
mountain=mountains.Mountain(worldwidth, height*0.3)
starfield=stars.Stars(width, height*0.7, 30)
entities= entity_mgr.EntityMgr(worldwidth, height)
entities.mountains = mountain
radar=radar.Radar(width, height, worldwidth)
foreach ( var i in range(0,3,1)) {
    entities.add_landers(3,i*100) 
}
 
 
 
bgxpos=0
fgxpos=0

while (!win.should_close()) {

    win.begin()
    win.clear(10,10,10, 255)

    vel = cont.vel
    cont.update()
    //vel = 0 
    starfield.update(-vel/5)
   
    fgxpos = fgxpos + vel
    if (fgxpos > width*10) {
        fgxpos = 0
    }
    cam.move(fgxpos)
    mountain.draw(win,height, cam, width)
    starfield.draw(win)
    entities.update(worldwidth, height)
    entities.draw(win,cam)
    radar.draw(win, cam, entities, mountain)
    win.end()
}
win.close()