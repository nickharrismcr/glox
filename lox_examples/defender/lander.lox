from sprite import Sprite 
import random
import math 
import colour
import event

class Lander < Sprite {

    init(pos, img, frames, start_frame, end_frame) { 
        super.init(pos, img, frames, start_frame, end_frame)
        this.type = "lander"
        this.animate(10)
        this.update_func=materialize 
        this.draw_func=draw_exp
        this.exp=60
        this.g = vec4(0,200,0,255)
        this.r = vec4(255,0,0,255)
        this.b = vec4(0,0,255,255)
        this.m = vec4(255,0,255,255)
        this.radar = this.g
        this.counter = 0 
        this.mgr = nil
        this.alive = true 
        this.width = this.texture.frame_width()
        this.height = this.texture.height()
    }
    position() {
        return this.pos 
    }
    update(width,height) {
        if (!this.alive) {
            return
        }   
        this.counter = this.counter + 1
        f=this.update_func 
        f(this,width,height) 

        if (this.pos.x > this.mgr.worldwidth) {
            this.pos.x = 0
        }
        if (this.pos.x < 0) {
            this.pos.x = this.mgr.worldwidth
        }
    }
    draw(win,cam) {
        if (!this.alive) {
            return
        }
        f=this.draw_func 
        f(this,win,cam) 
    }
    near(x1, x2) {
        return (math.abs(x1 - x2) < 5)
    }   
    maybe_fire_bullet() {
        if (random.integer(0,200) ==1   ) {
            v=vec2(1.0,1.0) 
            v=math.rotate2d(v,random.float(0,math.PI*2))
            v=math.scale2d(v,random.float(5.0,20.0))
            this.mgr.fire_bullet(this.pos,v)
        }
    }
}

func materialize(e, width, height) {
    e.exp = e.exp - 1
    if (e.exp < 0) {
        e.update_func = descend
        e.draw_func = draw_
        e.dp=vec2(random.choice((-5,-5)),5)
        e.counter = 0
       
    }
}

func descend(e, width, height) {
    e.pos = e.pos + e.dp

    mh = e.mgr.mountains.get(e.pos.x)
    msh = e.mgr.height - mh

    if (e.pos.y > msh - 200 ) {
        e.human = e.mgr.pick_a_human() 
        e.update_func = search 
        e.dp.y = 0
        e.mgr.events.emit("lander_searching", e)
    }

    e.maybe_fire_bullet()
}

func search(e, width, height) {
    e.pos = e.pos + e.dp
    mh = e.mgr.mountains.get(e.pos.x)
    msh = e.mgr.height - mh
    e.pos.y = msh - 200
    e.maybe_fire_bullet()
  
    if (e.human != nil) {
        if (e.near(e.human.sprite.pos.x, e.pos.x)) {
            e.update_func = grab
            e.dp.x = 0
            e.dp.y = 3
        }
    }
    
} 

func grab(e,width, height) {
    e.pos = e.pos + e.dp
    if (e.pos.y > e.human.pos.y  ) {
        e.update_func = abduct 
        e.pos.y = e.human.pos.y - 50
        e.human.update_func = nil
       
        e.dp.y = -4 
    }
    e.maybe_fire_bullet()
}

func abduct(e,width, height) {
    e.pos.y = e.pos.y + e.dp.y
    e.human.pos.x = e.pos.x
    e.human.pos.y = e.pos.y + 50
    if (e.pos.y < 150 ) {
        mutate(e)
    }
    e.maybe_fire_bullet()
}

func mutate(e) {
    e.update_func = mutated
    e.image = image
    e.human.sprite.pos.y = -1000
    e.human = nil
    img = image("pngs/mutant.png") 
    e.type = "mutant"
    e.img = img
    e.texture = texture(img,6,1,6)
    e.animate(2)
    e.dp.x = random.choice((-15,15))
    e.dp.y = 0 
    e.counter = 0 
}

func mutated(e,width, height) {
    e.radar = random.choice([e.r,e.g,e.b,e.m])
    e.pos = e.pos + e.dp
    if (e.counter%20 == 0) {
        e.dp.y = random.choice((-5,5))
    }
    if (e.pos.y < 100 ) {
        e.pos.y = 100
        if (e.dp.y < 0) {
            e.dp.y = 5
        }
    }
    e.maybe_fire_bullet()

    if (e.counter > 150 ) {
        die(e)
    }
}

func die(e) {
    e.draw_func = draw_exp
    e.exp = 0
    e.dp = vec2(0, 0)
    e.update_func = explode
    e.radar = nil 
   
}

func explode(e,width, height) {
    e.exp = e.exp + 1
    if (e.exp > 60) {
        e.alive = false
    }
}
 
func draw_exp(e,win,cam) {
    h = e.height
    w = e.width
 
    pixh =h/8.0
    pixw = w/6.0
 
    txt = e.get_texture()
    var spos = cam.translate(e.pos.x)
    if (spos != nil) {
        foreach( var i in range(1,7)){
            foreach ( var j in range(1,9)) {
                x = i * pixw
                y = j * pixh
                
                subx=spos +e.exp*(x-(w/2))
                suby=e.pos.y+e.exp*(y-(h/2))
                win.draw_texture_rect(txt, vec2(subx, suby), vec2(x, y), vec2(pixw, pixh))
            }
        }
    }
}

func draw_(e,win,cam){
    var spos = cam.translate(e.pos.x)
    if (spos != nil) {
        win.draw_texture(e.texture, vec2(spos, e.pos.y))
    }
    
}




