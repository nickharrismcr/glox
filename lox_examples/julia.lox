
// dynamic julia set with hue translation


import math
import colour

// GLSL vertex shader for 2D textured quad
var vertex_shader = "
#version 330

// Vertex shader for pulse effect
in vec3 vertexPosition;
in vec2 vertexTexCoord;
in vec3 vertexNormal;
in vec4 vertexColor;

uniform mat4 mvp;

out vec2 fragTexCoord;
out vec4 fragColor;
out vec3 fragPosition;

void main()
{
    fragTexCoord = vertexTexCoord;
    fragColor = vertexColor;
    fragPosition = vertexPosition;
    gl_Position = mvp * vec4(vertexPosition, 1.0);
}
"

// GLSL fragment shader for hue translation
var julia_hue_shader = "
#version 330 core
in vec2 fragTexCoord;
out vec4 finalColor;
uniform sampler2D texture0;
uniform float hue_shift;

// Convert RGB to HSV
vec3 rgb2hsv(vec3 c) {
    vec4 K = vec4(0.0, -1.0/3.0, 2.0/3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

// Convert HSV to RGB
vec3 hsv2rgb(vec3 c) {
    vec3 rgb = clamp(abs(mod(c.x * 6.0 + vec3(0.0,4.0,2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);
    return c.z * mix(vec3(1.0), rgb, c.y);
}

void main() {
    vec4 color = texture(texture0, fragTexCoord);
    vec3 hsv = rgb2hsv(color.rgb);
    hsv.x = mod(hsv.x + hue_shift, 1.0);
    finalColor = vec4(hsv2rgb(hsv), color.a);
}
"

var WIDTH = 800
var HEIGHT = 600
var SCALE = 1.0 
const ZOOM = 3
const MAX_ITER = 100

win = window(1,1)
win.init()
win.toggle_fullscreen()

// set draw position based on window size
xpos = (win.get_screen_width() - WIDTH * SCALE) / 2
ypos = (win.get_screen_height() - HEIGHT * SCALE) / 2

win.set_target_fps(60)
rt = render_texture(WIDTH, HEIGHT)
// hue shift shader setup
hue_shader = shader()
hue_shader.load_from_memory(vertex_shader, julia_hue_shader)
hue_shift = hue_shader.get_location("hue_shift")
hue_shader.set_value_float(hue_shift, 0.0)

// Create a float array for the calc to use
arr = float_array(WIDTH, HEIGHT)
R = float(WIDTH/HEIGHT)
scale = R * ZOOM
var speed = 0.01
var radius = 0.7885
var t = 0.0

while (!win.should_close()) {
    dspeed = speed + 0.001 * math.sin(t * 0.5)
    cx = radius * math.cos(t)
    cy = radius * math.sin(t)
    t = t + dspeed
    // native lox function to calculate the Julia set
    lox_julia_array(arr, WIDTH, HEIGHT, MAX_ITER, cx, cy, scale, 0.0, 0.0)
    rt.clear(vec4(0, 0, 0, 255))
    rt.draw_array_fast(arr) // Use optimized array drawing
 
    hue_shader.set_value_float(hue_shift, 0.5 + 0.5 * math.sin(t * 2))
    win.begin()
  
    win.begin_shader_mode(hue_shader)
    win.clear(vec4(10, 10, 30, 255))

    win.draw_render_texture_ex(rt, xpos, ypos, 0, SCALE, vec4(255,255,255,255))
    win.text("Julia Set c = " + str(math.round_places(cx, 2)) + " + " + str(math.round_places(cy, 2)) + "i", 100, 10, 20, vec4(255,255,255,255))
    win.end_shader_mode()
    win.end()
}
win.close()

