// textured cube batch performance demo
// Shows thousands of textured cubes with camera orbit and culling
import math;
import sys;

var win = window(1024, 768)
win.init()

// Camera parameters for orbiting
var camera_distance = 80.0
var camera_height = 40.0
var camera_angle = 0.0
var camera_target = vec3(0, 0, 0)

// Create single texture for all cubes
var texture1 = render_texture(32, 32)
texture1.clear(vec4(100, 100, 100, 255))  // Gray background
texture1.rectangle(4, 4, 24, 24, vec4(255, 200, 0, 255))  // Orange square
texture1.circle_fill(16, 16, 8, vec4(255, 0, 0, 255))  // Red circle

// Create massive textured cube batch
var textured_batch = batch(win.BATCH_TEXTURED_CUBE)

// Grid parameters for thousands of cubes
var grid_size = 40  // 40x40 = 1600 cubes
var cube_spacing = 3.0
var cube_size = 2.0
var grid_offset = -(grid_size * cube_spacing) / 2.0

print format("Generating %d textured cubes...", grid_size * grid_size)

// Add textured cubes in a large grid pattern
for (var x = 0; x < grid_size; x = x + 1) {
    for (var z = 0; z < grid_size; z = z + 1) {
        var pos = vec3(
            grid_offset + x * cube_spacing, 
            0, 
            grid_offset + z * cube_spacing
        )
        var size = vec3(cube_size, cube_size, cube_size)
        
        // Use same texture for all cubes, vary colors
        var color_intensity = 150 + ((x + z) % 4) * 25  // Varying brightness
        var color_hue = (x + z) % 3
        
        if (color_hue == 0) {
            textured_batch.add_textured_cube(texture1, pos, size, vec4(255, color_intensity, color_intensity, 255))
        } else if (color_hue == 1) {
            textured_batch.add_textured_cube(texture1, pos, size, vec4(color_intensity, 255, color_intensity, 255))
        } else {
            textured_batch.add_textured_cube(texture1, pos, size, vec4(color_intensity, color_intensity, 255, 255))
        }
    }
}

print format("Created textured cube batch with %d cubes", textured_batch.count())

// Performance tracking
var frame_count = 0
var start_time = sys.clock()
var fps_update_time = start_time

print "Starting demo - use WASD for manual camera control, or let it orbit automatically"
print "Press C to toggle culling, ESC to exit"

var enable_culling = false
var manual_camera = false

while (!win.should_close()) {
    frame_count = frame_count + 1
    var current_time = sys.clock()
    
    // Update camera angle first
    if (!manual_camera) {
        // Automatic camera orbit
        camera_angle = camera_angle + 0.5
    } else {
        // Manual controls
        if (win.key_down(win.KEY_W)) {
            camera_distance = camera_distance - 2.0
        }
        if (win.key_down(win.KEY_S)) {
            camera_distance = camera_distance + 2.0
        }
        if (win.key_down(win.KEY_A)) {
            camera_angle = camera_angle - 2.0
        }
        if (win.key_down(win.KEY_D)) {
            camera_angle = camera_angle + 2.0
        }
    }
    
    // Calculate camera position after angle update
    var cam_x = camera_target.x + camera_distance * math.cos(math.radians(camera_angle))
    var cam_z = camera_target.z + camera_distance * math.sin(math.radians(camera_angle))
    var cam = camera(vec3(cam_x, camera_height, cam_z), camera_target, vec3(0, 1, 0))
    
    win.begin()
    win.clear(vec4(20, 25, 35, 255))  // Dark blue background
    
    win.begin_3d(cam)
    
    // Draw textured cubes with optional culling
    if (enable_culling) {
        var cam_pos = vec3(cam_x, camera_height, cam_z)
        textured_batch.draw_culled(cam_pos, 200.0)
    } else {
        textured_batch.draw()
    }
    
    // Draw grid for reference
    // win.grid(20, 5.0)
    
    win.end_3d()
    
    // Calculate and display FPS
    var elapsed = current_time - fps_update_time
    if (elapsed >= 1.0) {
        var fps = frame_count / (current_time - start_time)
        fps_update_time = current_time
    }
    
    // UI
    win.text("Textured Cube Batch Performance Demo", 10, 10, 24, vec4(255, 255, 255, 255))
    win.text(format("Cubes: %d", textured_batch.count()), 10, 45, 18, vec4(200, 200, 200, 255))
    
    var culling_text = "OFF"
    if (enable_culling) {
        culling_text = "ON"
    }
    win.text(format("Culling: %s", culling_text), 10, 70, 18, vec4(200, 200, 200, 255))
    
    var camera_text = "Auto Orbit"
    if (manual_camera) {
        camera_text = "Manual (WASD)"
    }
    win.text(format("Camera: %s", camera_text), 10, 95, 18, vec4(200, 200, 200, 255))
    
    win.text(format("Frame: %d", frame_count), 10, 120, 16, vec4(180, 180, 180, 255))
    
    win.text("Controls:", 10, 650, 16, vec4(150, 150, 150, 255))
    win.text("C - Toggle culling | M - Toggle manual camera", 10, 670, 14, vec4(150, 150, 150, 255))
    win.text("WASD - Camera control (manual mode) | ESC - Exit", 10, 690, 14, vec4(150, 150, 150, 255))
    
    win.end()
    
    // Handle input
    if (win.key_pressed(win.KEY_C)) {
        enable_culling = !enable_culling
        var culling_status = "disabled"
        if (enable_culling) {
            culling_status = "enabled"
        }
        print "Culling " & culling_status
    }
    
    if (win.key_pressed(win.KEY_M)) {
        manual_camera = !manual_camera
        var camera_mode = "Auto orbit"
        if (manual_camera) {
            camera_mode = "Manual"
        }
        print "Camera mode: " & camera_mode
    }
    
    if (win.key_pressed(win.KEY_ESCAPE)) {
        break
    }
}

var total_time = sys.clock() - start_time
var avg_fps = frame_count / total_time

print "Demo finished:"
print format("Total frames: %d", frame_count)
print format("Total time: %g seconds", total_time)
print format("Average FPS: %g", avg_fps)

win.close()
