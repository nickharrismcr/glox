
//
// @file math.lox
// @brief Extended mathematical utilities for GLOX
// 
// This module provides additional mathematical functions beyond the built-in math
// functions, with a focus on 2D vector operations and geometric calculations.
// 
// Functions:
// - rotate2d(vec2, angle) - Rotate a 2D vector by angle (radians)
// - scale2d(vec2, scalar) - Scale a 2D vector by scalar
// - floor(n) - Return the largest integer less than or equal to n
// - max(a, b) - Return the maximum of two numbers
// - min(a, b) - Return the minimum of two numbers
// - abs(n) - Return the absolute value of n
// 
// Note: Some functions may be moved to native implementation for better performance.
// 
// @author GLOX Project
// @date 2025
//

// TODO move all vector stuff into native  

func rotate2d(v2, angle) {
    cosA = _cos(angle);
    sinA = _sin(angle);
    xNew = v2.x * cosA - v2.y * sinA;
    yNew = v2.x * sinA + v2.y * cosA;
    return vec2(xNew, yNew)
}
 
func scale2d(v2, scalar) {
    return vec2(v2.x * scalar, v2.y * scalar);
}

func length(v2) {
    // Calculate the length of a 2D vector
    return _sqrt(v2.x * v2.x + v2.y * v2.y);
}


func floor(n) {
  if (n < 0 and n != int(n)) {
    return int(n) - 1;
  }
  return int(n);
} 

func max(a, b) {
  if (a > b) {
    return a;
  }
  return b;
}

func min(a, b) {
  if (a < b) {
    return a;
  }
  return b;
}

func abs(n) {
  if (n < 0) {
    return -n;
  }
  return n;
} 

func sin(angle) {
    // Use native sine function for better performance
    return _sin(angle);
} 

func cos(angle) {
    // Use native cosine function for better performance
    return _cos(angle);
} 

func sqrt(n){
    // Use native square root function for better performance
    return _sqrt(n);
}
var PI = 3.141592653589793238462643383279;