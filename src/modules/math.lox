
//
// @file math.lox
// @brief Extended mathematical utilities for GLOX
// 
// This module provides additional mathematical functions beyond the built-in math
// functions, with a focus on 2D vector operations and geometric calculations.
// 
// Functions:
// - rotate2d(vec2, angle) - Rotate a 2D vector by angle (radians)
// - scale2d(vec2, scalar) - Scale a 2D vector by scalar
// - floor(n) - Return the largest integer less than or equal to n
// - round(n) - Round a number to the nearest integer
// - max(a, b) - Return the maximum of two numbers
// - min(a, b) - Return the minimum of two numbers
// - abs(n) - Return the absolute value of n
// 
// Note: Some functions may be moved to native implementation for better performance.
// 
// @author GLOX Project
// @date 2025
//

// TODO move all vector stuff into native  

func rotate2d(v2, angle) {
    cosA = _cos(angle);
    sinA = _sin(angle);
    xNew = v2.x * cosA - v2.y * sinA;
    yNew = v2.x * sinA + v2.y * cosA;
    return vec2(xNew, yNew)
}
 
func scale2(v2, scalar) {
    return vec2(v2.x * scalar, v2.y * scalar);
}

func scale3(v3, scalar) {
    return vec3(v3.x * scalar, v3.y * scalar, v3.z * scalar);
} 

func length2(v2) {
    // Calculate the length of a 2D vector

    return _sqrt(v2.x * v2.x + v2.y * v2.y);
}

func length3(v3) {
    // Calculate the length of a 3D vector
    return _sqrt(v3.x * v3.x + v3.y * v3.y + v3.z * v3.z);
} 


func floor(n) {
  if (n < 0 and n != int(n)) {
    return int(n) - 1;
  }
  return int(n);
} 

func round(n) {
  if (n >= 0) {
    return floor(n + 0.5);
  } else {
    return floor(n + 0.5);  // Use same logic for both positive and negative
  }
}

func max(a, b) {
  if (a > b) {
    return a;
  }
  return b;
}

func min(a, b) {
  if (a < b) {
    return a;
  }
  return b;
}

func abs(n) {
  if (n < 0) {
    return -n;
  }
  return n;
} 

func sin(angle) {
    // Use native sine function for better performance
    return _sin(angle);
} 

func cos(angle) {
    // Use native cosine function for better performance
    return _cos(angle);
} 

func tan(angle) {
    // Use native tangent function for better performance
    return _tan(angle);
}

func sqrt(n){
    // Use native square root function for better performance
    return _sqrt(n);
}
var PI = 3.141592653589793238462643383279;

func normalize2(v2) {
    // Normalize a 2D vector
    len = length2(v2);
    if (len == 0) {
        return vec2(0, 0); // Avoid division by zero
    }
    return vec2(v2.x / len, v2.y / len);
} 

func normalize3(v3) {
    // Normalize a 3D vector
    len = length3(v3);
    if (len == 0) {
        return vec3(0, 0, 0); // Avoid division by zero
    }
    return vec3(v3.x / len, v3.y / len, v3.z / len);
}   

func sign(v) {
    // Return -1, 0, or 1 based on the sign of the value
    if (v > 0) {
        return 1;
    } else if (v < 0) {
        return -1;
    }
    return 0; // Zero case
}

func radians(degrees) {
    // Convert degrees to radians
    return degrees * PI / 180.0;
}

func degrees(radians_val) {
    // Convert radians to degrees
    return radians_val * 180.0 / PI;
} 

func pow(base, exponent) {
    // Calculate base raised to the power of exponent
    base= float(base);
    exponent= float(exponent);
    return _pow(base, exponent);
}

func round_places(n, places) {
    // Round a number to a specified number of decimal places
    fn=float(n) 
    fplaces=float(places)
    ffactor = _pow(10.0, fplaces);
    return floor(fn * ffactor + 0.5) / ffactor;
}