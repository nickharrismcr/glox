
import random;
import colour;
import math; 

func random_vec2D (minX, maxX, minY, maxY) {
    return math.Vector2D(random.integer(minX, maxX), random.integer(minY, maxY));
}



class Line {
    init(x1, y1, x2, y2, r, g, b, a, width, height) {
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
        this.d1= random_vec2D(-4, 4, -4, 4);
        this.d2= random_vec2D(-4, 4, -4, 4);
        this.width = width;
        this.height = height;
 
    }
    move(){
        this.x1 = this.x1 + this.d1.x;
        this.y1 = this.y1 + this.d1.y;
        this.x2 = this.x2 + this.d2.x;
        this.y2 = this.y2 + this.d2.y;
        if (this.x1 < 0 or this.x1 > this.width) {
            this.d1.x = -this.d1.x;
        }
        if (this.y1 < 0 or this.y1 > this.height) { 
            this.d1.y = -this.d1.y;
        }
        if (this.x2 < 0 or this.x2 > this.width) {
            this.d2.x = -this.d2.x;     
        }   
        if (this.y2 < 0 or this.y2 > this.height) {
            this.d2.y = -this.d2.y;
        }    
    }
    draw(g) {
        g.line(this.x1, this.y1, this.x2, this.y2, this.r, this.g, this.b, this.a);
    }

    new() {
        return Line(this.x1, this.y1, this.x2, this.y2, this.r, this.g, this.b, this.a, this.width, this.height);
    }
    toString() {
        return "Line(" + str(this.x1) + ", " + str(this.y1) + ", " + str(this.x2) + ", " + str(this.y2) + ", " + str(this.r) + ", " + str(this.g) + ", " + str(this.b) + ", " + str(this.a) + ")";
    }
}

class Lines {
    init(width, height ){
        this.width = width;
        this.height = height;
        this.lines = [];
        this.idx = 0;
        this.max_lines = 100;  
        for (var i = 0; i < this.max_lines; i = i + 1) {
            this.lines.append(Line(0, 0, 0, 0, 255, 255, 255, 255, width, height)); 
        }
    }
    add_line(x1, y1, x2, y2, r, g, b, a) {
        var line = Line(x1, y1, x2, y2, r, g, b, a, this.width, this.height);
        this.lines[this.idx] = line;
    }
    update() {
        this.lines[this.idx].move(); 
        this.idx = (this.idx + 1) % this.max_lines;
  
        var i = this.idx-1; 
        if ( i == 0) {
            i = this.max_lines - 1;
        }   
        last = this.lines[i]; 
        print last;
        print last.x1;
        this.lines[this.idx] = Line(last.x1, last.y1, last.x2, last.y2, last.r, last.g, last.b, last.a, this.width, this.height); 
       
    }
    draw(g) {
        foreach ( var l in this.lines ) {
            if (l == nil) {
                continue;
            }
            l.draw(g);
        }
    }
}
 

const width=1500;
const height=900;
var g = graphics(width,height);
g.init();

lines=Lines(width, height); 

for (var i = 0; i < 300; i = i + 1) {
    var pos = random_vec2D(0, width, 0, height);
    var pos2 = random_vec2D(0, width, 0, height);
    var col = colour.random_rgb(); 
    lines.add_line(pos.x, pos.y, pos2.x, pos2.y, col.r, col.g, col.b, 255);
}

while (!g.should_close()) {

    g.begin();
    g.clear(0, 0, 0, 255);
  
    lines.update();
    lines.draw(g);
 
    g.end();
}
g.close();